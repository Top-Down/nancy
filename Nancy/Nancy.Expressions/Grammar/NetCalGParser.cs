//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/andre/Documents/GitHub/nancy-expressions/Nancy.Expressions/Nancy.Expressions/Grammar/NetCalG.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


#pragma warning disable 3021

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class NetCalGParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, CONV=6, DECONV=7, MAXPLUSCONV=8, 
		MAXPLUSDECONV=9, ADD=10, SUB=11, MIN=12, MAX=13, COMP=14, NON_DECREASING=15, 
		NON_NEGATIVE=16, SUBADDITIVE=17, CONVEX=18, CONCAVE=19, LEFT_CONTINUOUS=20, 
		RIGHT_CONTINUOUS=21, ZERO_AT_ZERO=22, ULTIMATELY_CONSTANT=23, WELL_DEFINED=24, 
		U_SET=25, RATIONALS=26, GREATER_OR_EQUAL=27, LESS_THAN_OR_EQUAL=28, EQUAL=29, 
		IN=30, ID=31, SEMICOLON=32, NEWLINE=33, WHITESPACE=34;
	public const int
		RULE_equivalenceCatalog = 0, RULE_equivalence = 1, RULE_equivalenceExpression = 2, 
		RULE_hypothesis = 3, RULE_set = 4, RULE_placeholder = 5, RULE_property = 6, 
		RULE_curveExpression = 7, RULE_constantCurve = 8, RULE_relationalOperator = 9;
	public static readonly string[] ruleNames = {
		"equivalenceCatalog", "equivalence", "equivalenceExpression", "hypothesis", 
		"set", "placeholder", "property", "curveExpression", "constantCurve", 
		"relationalOperator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'==>'", "'('", "')'", null, null, null, null, "'+'", 
		"'-'", null, null, "'\\u00B0'", "'non-decreasing'", "'non-negative'", 
		"'subadditive'", "'convex'", "'concave'", "'left-continuous'", "'right-continuous'", 
		"'zero-at-zero'", "'ultimately-constant'", "'well-defined'", "'U'", "'Q'", 
		"'>='", "'<='", "'='", "'in'", null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "CONV", "DECONV", "MAXPLUSCONV", "MAXPLUSDECONV", 
		"ADD", "SUB", "MIN", "MAX", "COMP", "NON_DECREASING", "NON_NEGATIVE", 
		"SUBADDITIVE", "CONVEX", "CONCAVE", "LEFT_CONTINUOUS", "RIGHT_CONTINUOUS", 
		"ZERO_AT_ZERO", "ULTIMATELY_CONSTANT", "WELL_DEFINED", "U_SET", "RATIONALS", 
		"GREATER_OR_EQUAL", "LESS_THAN_OR_EQUAL", "EQUAL", "IN", "ID", "SEMICOLON", 
		"NEWLINE", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "NetCalG.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static NetCalGParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public NetCalGParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public NetCalGParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class EquivalenceCatalogContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EquivalenceContext[] equivalence() {
			return GetRuleContexts<EquivalenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EquivalenceContext equivalence(int i) {
			return GetRuleContext<EquivalenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(NetCalGParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(NetCalGParser.NEWLINE, i);
		}
		public EquivalenceCatalogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equivalenceCatalog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INetCalGVisitor<TResult> typedVisitor = visitor as INetCalGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquivalenceCatalog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquivalenceCatalogContext equivalenceCatalog() {
		EquivalenceCatalogContext _localctx = new EquivalenceCatalogContext(Context, State);
		EnterRule(_localctx, 0, RULE_equivalenceCatalog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 20;
				equivalence();
				State = 21;
				Match(NEWLINE);
				}
				}
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquivalenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(NetCalGParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(NetCalGParser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EquivalenceExpressionContext equivalenceExpression() {
			return GetRuleContext<EquivalenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HypothesisContext[] hypothesis() {
			return GetRuleContexts<HypothesisContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HypothesisContext hypothesis(int i) {
			return GetRuleContext<HypothesisContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(NetCalGParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(NetCalGParser.SEMICOLON, i);
		}
		public EquivalenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equivalence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INetCalGVisitor<TResult> typedVisitor = visitor as INetCalGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquivalence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquivalenceContext equivalence() {
		EquivalenceContext _localctx = new EquivalenceContext(Context, State);
		EnterRule(_localctx, 2, RULE_equivalence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			Match(T__0);
			State = 28;
			Match(NEWLINE);
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 29;
				hypothesis();
				State = 30;
				Match(SEMICOLON);
				State = 31;
				Match(NEWLINE);
				}
				}
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 38;
			Match(T__1);
			State = 39;
			Match(T__2);
			State = 40;
			equivalenceExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquivalenceExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CurveExpressionContext[] curveExpression() {
			return GetRuleContexts<CurveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CurveExpressionContext curveExpression(int i) {
			return GetRuleContext<CurveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(NetCalGParser.EQUAL, 0); }
		public EquivalenceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equivalenceExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INetCalGVisitor<TResult> typedVisitor = visitor as INetCalGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquivalenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquivalenceExpressionContext equivalenceExpression() {
		EquivalenceExpressionContext _localctx = new EquivalenceExpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_equivalenceExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			curveExpression(0);
			State = 43;
			Match(EQUAL);
			State = 44;
			curveExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HypothesisContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PlaceholderContext[] placeholder() {
			return GetRuleContexts<PlaceholderContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlaceholderContext placeholder(int i) {
			return GetRuleContext<PlaceholderContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(NetCalGParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONV() { return GetToken(NetCalGParser.CONV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WELL_DEFINED() { return GetToken(NetCalGParser.WELL_DEFINED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RelationalOperatorContext relationalOperator() {
			return GetRuleContext<RelationalOperatorContext>(0);
		}
		public HypothesisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hypothesis; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INetCalGVisitor<TResult> typedVisitor = visitor as INetCalGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHypothesis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HypothesisContext hypothesis() {
		HypothesisContext _localctx = new HypothesisContext(Context, State);
		EnterRule(_localctx, 6, RULE_hypothesis);
		int _la;
		try {
			State = 64;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 46;
				placeholder();
				State = 47;
				Match(IN);
				State = 48;
				set();
				State = 52;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16744448L) != 0)) {
					{
					{
					State = 49;
					property();
					}
					}
					State = 54;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 55;
				placeholder();
				State = 56;
				Match(CONV);
				State = 57;
				placeholder();
				State = 58;
				Match(WELL_DEFINED);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 60;
				placeholder();
				State = 61;
				relationalOperator();
				State = 62;
				placeholder();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode U_SET() { return GetToken(NetCalGParser.U_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RATIONALS() { return GetToken(NetCalGParser.RATIONALS, 0); }
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INetCalGVisitor<TResult> typedVisitor = visitor as INetCalGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 8, RULE_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			_la = TokenStream.LA(1);
			if ( !(_la==U_SET || _la==RATIONALS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceholderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(NetCalGParser.ID, 0); }
		public PlaceholderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_placeholder; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INetCalGVisitor<TResult> typedVisitor = visitor as INetCalGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlaceholder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlaceholderContext placeholder() {
		PlaceholderContext _localctx = new PlaceholderContext(Context, State);
		EnterRule(_localctx, 10, RULE_placeholder);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
	 
		public PropertyContext() { }
		public virtual void CopyFrom(PropertyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ZeroAtZeroPropertyContext : PropertyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_AT_ZERO() { return GetToken(NetCalGParser.ZERO_AT_ZERO, 0); }
		public ZeroAtZeroPropertyContext(PropertyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INetCalGVisitor<TResult> typedVisitor = visitor as INetCalGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZeroAtZeroProperty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NonNegativePropertyContext : PropertyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_NEGATIVE() { return GetToken(NetCalGParser.NON_NEGATIVE, 0); }
		public NonNegativePropertyContext(PropertyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INetCalGVisitor<TResult> typedVisitor = visitor as INetCalGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonNegativeProperty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RightContinuousPropertyContext : PropertyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_CONTINUOUS() { return GetToken(NetCalGParser.RIGHT_CONTINUOUS, 0); }
		public RightContinuousPropertyContext(PropertyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INetCalGVisitor<TResult> typedVisitor = visitor as INetCalGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightContinuousProperty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NonDecreasingPropertyContext : PropertyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_DECREASING() { return GetToken(NetCalGParser.NON_DECREASING, 0); }
		public NonDecreasingPropertyContext(PropertyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INetCalGVisitor<TResult> typedVisitor = visitor as INetCalGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonDecreasingProperty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UltimatelyConstantContext : PropertyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULTIMATELY_CONSTANT() { return GetToken(NetCalGParser.ULTIMATELY_CONSTANT, 0); }
		public UltimatelyConstantContext(PropertyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INetCalGVisitor<TResult> typedVisitor = visitor as INetCalGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUltimatelyConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConvexPropertyContext : PropertyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVEX() { return GetToken(NetCalGParser.CONVEX, 0); }
		public ConvexPropertyContext(PropertyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INetCalGVisitor<TResult> typedVisitor = visitor as INetCalGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConvexProperty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubadditivePropertyContext : PropertyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBADDITIVE() { return GetToken(NetCalGParser.SUBADDITIVE, 0); }
		public SubadditivePropertyContext(PropertyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INetCalGVisitor<TResult> typedVisitor = visitor as INetCalGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubadditiveProperty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcavePropertyContext : PropertyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAVE() { return GetToken(NetCalGParser.CONCAVE, 0); }
		public ConcavePropertyContext(PropertyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INetCalGVisitor<TResult> typedVisitor = visitor as INetCalGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcaveProperty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LeftContinuousPropertyContext : PropertyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_CONTINUOUS() { return GetToken(NetCalGParser.LEFT_CONTINUOUS, 0); }
		public LeftContinuousPropertyContext(PropertyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INetCalGVisitor<TResult> typedVisitor = visitor as INetCalGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftContinuousProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 12, RULE_property);
		try {
			State = 79;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NON_DECREASING:
				_localctx = new NonDecreasingPropertyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 70;
				Match(NON_DECREASING);
				}
				break;
			case NON_NEGATIVE:
				_localctx = new NonNegativePropertyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 71;
				Match(NON_NEGATIVE);
				}
				break;
			case SUBADDITIVE:
				_localctx = new SubadditivePropertyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 72;
				Match(SUBADDITIVE);
				}
				break;
			case CONVEX:
				_localctx = new ConvexPropertyContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 73;
				Match(CONVEX);
				}
				break;
			case CONCAVE:
				_localctx = new ConcavePropertyContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 74;
				Match(CONCAVE);
				}
				break;
			case LEFT_CONTINUOUS:
				_localctx = new LeftContinuousPropertyContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 75;
				Match(LEFT_CONTINUOUS);
				}
				break;
			case RIGHT_CONTINUOUS:
				_localctx = new RightContinuousPropertyContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 76;
				Match(RIGHT_CONTINUOUS);
				}
				break;
			case ZERO_AT_ZERO:
				_localctx = new ZeroAtZeroPropertyContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 77;
				Match(ZERO_AT_ZERO);
				}
				break;
			case ULTIMATELY_CONSTANT:
				_localctx = new UltimatelyConstantContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 78;
				Match(ULTIMATELY_CONSTANT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CurveExpressionContext : ParserRuleContext {
		public CurveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_curveExpression; } }
	 
		public CurveExpressionContext() { }
		public virtual void CopyFrom(CurveExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CompositionExpressionContext : CurveExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CurveExpressionContext[] curveExpression() {
			return GetRuleContexts<CurveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CurveExpressionContext curveExpression(int i) {
			return GetRuleContext<CurveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMP() { return GetToken(NetCalGParser.COMP, 0); }
		public CompositionExpressionContext(CurveExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INetCalGVisitor<TResult> typedVisitor = visitor as INetCalGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : CurveExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CurveExpressionContext curveExpression() {
			return GetRuleContext<CurveExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(CurveExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INetCalGVisitor<TResult> typedVisitor = visitor as INetCalGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaxPlusDeconvolutionExpressionContext : CurveExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CurveExpressionContext[] curveExpression() {
			return GetRuleContexts<CurveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CurveExpressionContext curveExpression(int i) {
			return GetRuleContext<CurveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXPLUSDECONV() { return GetToken(NetCalGParser.MAXPLUSDECONV, 0); }
		public MaxPlusDeconvolutionExpressionContext(CurveExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INetCalGVisitor<TResult> typedVisitor = visitor as INetCalGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxPlusDeconvolutionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionExpressionContext : CurveExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CurveExpressionContext[] curveExpression() {
			return GetRuleContexts<CurveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CurveExpressionContext curveExpression(int i) {
			return GetRuleContext<CurveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(NetCalGParser.ADD, 0); }
		public AdditionExpressionContext(CurveExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INetCalGVisitor<TResult> typedVisitor = visitor as INetCalGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConvolutionExpressionContext : CurveExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CurveExpressionContext[] curveExpression() {
			return GetRuleContexts<CurveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CurveExpressionContext curveExpression(int i) {
			return GetRuleContext<CurveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONV() { return GetToken(NetCalGParser.CONV, 0); }
		public ConvolutionExpressionContext(CurveExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INetCalGVisitor<TResult> typedVisitor = visitor as INetCalGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConvolutionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantCurveExpressionContext : CurveExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantCurveContext constantCurve() {
			return GetRuleContext<ConstantCurveContext>(0);
		}
		public ConstantCurveExpressionContext(CurveExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INetCalGVisitor<TResult> typedVisitor = visitor as INetCalGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantCurveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeconvolutionExpressionContext : CurveExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CurveExpressionContext[] curveExpression() {
			return GetRuleContexts<CurveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CurveExpressionContext curveExpression(int i) {
			return GetRuleContext<CurveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECONV() { return GetToken(NetCalGParser.DECONV, 0); }
		public DeconvolutionExpressionContext(CurveExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INetCalGVisitor<TResult> typedVisitor = visitor as INetCalGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeconvolutionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractionExpressionContext : CurveExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CurveExpressionContext[] curveExpression() {
			return GetRuleContexts<CurveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CurveExpressionContext curveExpression(int i) {
			return GetRuleContext<CurveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(NetCalGParser.SUB, 0); }
		public SubtractionExpressionContext(CurveExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INetCalGVisitor<TResult> typedVisitor = visitor as INetCalGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinimumExpressionContext : CurveExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CurveExpressionContext[] curveExpression() {
			return GetRuleContexts<CurveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CurveExpressionContext curveExpression(int i) {
			return GetRuleContext<CurveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(NetCalGParser.MIN, 0); }
		public MinimumExpressionContext(CurveExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INetCalGVisitor<TResult> typedVisitor = visitor as INetCalGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinimumExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaxPlusConvolutionExpressionContext : CurveExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CurveExpressionContext[] curveExpression() {
			return GetRuleContexts<CurveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CurveExpressionContext curveExpression(int i) {
			return GetRuleContext<CurveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXPLUSCONV() { return GetToken(NetCalGParser.MAXPLUSCONV, 0); }
		public MaxPlusConvolutionExpressionContext(CurveExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INetCalGVisitor<TResult> typedVisitor = visitor as INetCalGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxPlusConvolutionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaximumExpressionContext : CurveExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CurveExpressionContext[] curveExpression() {
			return GetRuleContexts<CurveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CurveExpressionContext curveExpression(int i) {
			return GetRuleContext<CurveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(NetCalGParser.MAX, 0); }
		public MaximumExpressionContext(CurveExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INetCalGVisitor<TResult> typedVisitor = visitor as INetCalGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaximumExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CurveExpressionContext curveExpression() {
		return curveExpression(0);
	}

	private CurveExpressionContext curveExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CurveExpressionContext _localctx = new CurveExpressionContext(Context, _parentState);
		CurveExpressionContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_curveExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				_localctx = new ConstantCurveExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 82;
				constantCurve();
				}
				break;
			case T__3:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 83;
				Match(T__3);
				State = 84;
				curveExpression(0);
				State = 85;
				Match(T__4);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 118;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 116;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						_localctx = new ConvolutionExpressionContext(new CurveExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_curveExpression);
						State = 89;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 90;
						Match(CONV);
						State = 91;
						curveExpression(12);
						}
						break;
					case 2:
						{
						_localctx = new DeconvolutionExpressionContext(new CurveExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_curveExpression);
						State = 92;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 93;
						Match(DECONV);
						State = 94;
						curveExpression(11);
						}
						break;
					case 3:
						{
						_localctx = new MaxPlusConvolutionExpressionContext(new CurveExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_curveExpression);
						State = 95;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 96;
						Match(MAXPLUSCONV);
						State = 97;
						curveExpression(10);
						}
						break;
					case 4:
						{
						_localctx = new MaxPlusDeconvolutionExpressionContext(new CurveExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_curveExpression);
						State = 98;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 99;
						Match(MAXPLUSDECONV);
						State = 100;
						curveExpression(9);
						}
						break;
					case 5:
						{
						_localctx = new MinimumExpressionContext(new CurveExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_curveExpression);
						State = 101;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 102;
						Match(MIN);
						State = 103;
						curveExpression(8);
						}
						break;
					case 6:
						{
						_localctx = new MaximumExpressionContext(new CurveExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_curveExpression);
						State = 104;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 105;
						Match(MAX);
						State = 106;
						curveExpression(7);
						}
						break;
					case 7:
						{
						_localctx = new AdditionExpressionContext(new CurveExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_curveExpression);
						State = 107;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 108;
						Match(ADD);
						State = 109;
						curveExpression(6);
						}
						break;
					case 8:
						{
						_localctx = new SubtractionExpressionContext(new CurveExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_curveExpression);
						State = 110;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 111;
						Match(SUB);
						State = 112;
						curveExpression(5);
						}
						break;
					case 9:
						{
						_localctx = new CompositionExpressionContext(new CurveExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_curveExpression);
						State = 113;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 114;
						Match(COMP);
						State = 115;
						curveExpression(4);
						}
						break;
					}
					} 
				}
				State = 120;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConstantCurveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PlaceholderContext placeholder() {
			return GetRuleContext<PlaceholderContext>(0);
		}
		public ConstantCurveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantCurve; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INetCalGVisitor<TResult> typedVisitor = visitor as INetCalGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantCurve(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantCurveContext constantCurve() {
		ConstantCurveContext _localctx = new ConstantCurveContext(Context, State);
		EnterRule(_localctx, 16, RULE_constantCurve);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			placeholder();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUAL() { return GetToken(NetCalGParser.GREATER_OR_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN_OR_EQUAL() { return GetToken(NetCalGParser.LESS_THAN_OR_EQUAL, 0); }
		public RelationalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INetCalGVisitor<TResult> typedVisitor = visitor as INetCalGVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalOperatorContext relationalOperator() {
		RelationalOperatorContext _localctx = new RelationalOperatorContext(Context, State);
		EnterRule(_localctx, 18, RULE_relationalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			_la = TokenStream.LA(1);
			if ( !(_la==GREATER_OR_EQUAL || _la==LESS_THAN_OR_EQUAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return curveExpression_sempred((CurveExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool curveExpression_sempred(CurveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 5);
		case 7: return Precpred(Context, 4);
		case 8: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,34,126,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,1,0,1,0,1,0,4,0,24,8,0,11,0,12,0,25,1,1,1,1,1,1,1,
		1,1,1,1,1,5,1,34,8,1,10,1,12,1,37,9,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,
		1,3,1,3,1,3,1,3,5,3,51,8,3,10,3,12,3,54,9,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,3,3,65,8,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
		6,3,6,80,8,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,88,8,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,5,7,117,8,7,10,7,12,7,120,9,7,1,8,1,8,1,9,1,9,1,9,0,1,
		14,10,0,2,4,6,8,10,12,14,16,18,0,2,1,0,25,26,1,0,27,28,138,0,23,1,0,0,
		0,2,27,1,0,0,0,4,42,1,0,0,0,6,64,1,0,0,0,8,66,1,0,0,0,10,68,1,0,0,0,12,
		79,1,0,0,0,14,87,1,0,0,0,16,121,1,0,0,0,18,123,1,0,0,0,20,21,3,2,1,0,21,
		22,5,33,0,0,22,24,1,0,0,0,23,20,1,0,0,0,24,25,1,0,0,0,25,23,1,0,0,0,25,
		26,1,0,0,0,26,1,1,0,0,0,27,28,5,1,0,0,28,35,5,33,0,0,29,30,3,6,3,0,30,
		31,5,32,0,0,31,32,5,33,0,0,32,34,1,0,0,0,33,29,1,0,0,0,34,37,1,0,0,0,35,
		33,1,0,0,0,35,36,1,0,0,0,36,38,1,0,0,0,37,35,1,0,0,0,38,39,5,2,0,0,39,
		40,5,3,0,0,40,41,3,4,2,0,41,3,1,0,0,0,42,43,3,14,7,0,43,44,5,29,0,0,44,
		45,3,14,7,0,45,5,1,0,0,0,46,47,3,10,5,0,47,48,5,30,0,0,48,52,3,8,4,0,49,
		51,3,12,6,0,50,49,1,0,0,0,51,54,1,0,0,0,52,50,1,0,0,0,52,53,1,0,0,0,53,
		65,1,0,0,0,54,52,1,0,0,0,55,56,3,10,5,0,56,57,5,6,0,0,57,58,3,10,5,0,58,
		59,5,24,0,0,59,65,1,0,0,0,60,61,3,10,5,0,61,62,3,18,9,0,62,63,3,10,5,0,
		63,65,1,0,0,0,64,46,1,0,0,0,64,55,1,0,0,0,64,60,1,0,0,0,65,7,1,0,0,0,66,
		67,7,0,0,0,67,9,1,0,0,0,68,69,5,31,0,0,69,11,1,0,0,0,70,80,5,15,0,0,71,
		80,5,16,0,0,72,80,5,17,0,0,73,80,5,18,0,0,74,80,5,19,0,0,75,80,5,20,0,
		0,76,80,5,21,0,0,77,80,5,22,0,0,78,80,5,23,0,0,79,70,1,0,0,0,79,71,1,0,
		0,0,79,72,1,0,0,0,79,73,1,0,0,0,79,74,1,0,0,0,79,75,1,0,0,0,79,76,1,0,
		0,0,79,77,1,0,0,0,79,78,1,0,0,0,80,13,1,0,0,0,81,82,6,7,-1,0,82,88,3,16,
		8,0,83,84,5,4,0,0,84,85,3,14,7,0,85,86,5,5,0,0,86,88,1,0,0,0,87,81,1,0,
		0,0,87,83,1,0,0,0,88,118,1,0,0,0,89,90,10,11,0,0,90,91,5,6,0,0,91,117,
		3,14,7,12,92,93,10,10,0,0,93,94,5,7,0,0,94,117,3,14,7,11,95,96,10,9,0,
		0,96,97,5,8,0,0,97,117,3,14,7,10,98,99,10,8,0,0,99,100,5,9,0,0,100,117,
		3,14,7,9,101,102,10,7,0,0,102,103,5,12,0,0,103,117,3,14,7,8,104,105,10,
		6,0,0,105,106,5,13,0,0,106,117,3,14,7,7,107,108,10,5,0,0,108,109,5,10,
		0,0,109,117,3,14,7,6,110,111,10,4,0,0,111,112,5,11,0,0,112,117,3,14,7,
		5,113,114,10,3,0,0,114,115,5,14,0,0,115,117,3,14,7,4,116,89,1,0,0,0,116,
		92,1,0,0,0,116,95,1,0,0,0,116,98,1,0,0,0,116,101,1,0,0,0,116,104,1,0,0,
		0,116,107,1,0,0,0,116,110,1,0,0,0,116,113,1,0,0,0,117,120,1,0,0,0,118,
		116,1,0,0,0,118,119,1,0,0,0,119,15,1,0,0,0,120,118,1,0,0,0,121,122,3,10,
		5,0,122,17,1,0,0,0,123,124,7,1,0,0,124,19,1,0,0,0,8,25,35,52,64,79,87,
		116,118
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
